

# Define a function to train the models with default settings
def get_model(X_train, y_train, X_test, y_test, model_type, vrtbose=0):

    np.random.seed(42)

    if model_type == 'logistic_regression':
        model = LogisticRegression(penalty='l2', C=0.1) ## L2 regularization
    elif model_type == 'naive_bayes':
        model = GaussianNB()
    elif model_type == 'svc':
        model = SVC(random_state = 101, C =1, degree= 3, gamma= 1, kernel= 'poly')
    elif model_type == 'kn_classifier':
        model = KNeighborsClassifier()
    elif model_type == 'decision_tree':
        model = DecisionTreeClassifier(max_depth=10)  # Pruning
    elif model_type == 'random_forest':
        model = RandomForestClassifier(n_estimators=100, max_depth=10)  # Pruning
    elif model_type == 'linear_discriminant':
        model = LinearDiscriminantAnalysis()
    elif model_type == 'ada_boost':
        model = AdaBoostClassifier()
    elif model_type == 'gradient_boost':
        model = GradientBoostingClassifier()
    elif model_type == 'xg_boost':
        model = xgb.XGBClassifier()
    elif model_type == 'lgb_classifier':
        model = LGBMClassifier(force_col_wise=True, verbose=-1)
    else:
        raise ValueError('Invalid model type')

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)


    # calculate the accuracies
    acc_test = accuracy_score(y_test, y_pred)
    acc_train = model.score(X_train, y_train)

    # print the accuracies
    print(f'Test Accuracy for {model_type}: {acc_test:.3f}')
    print(f'Train Accuracy for {model_type}: {acc_train:.3f}')
    print()

    cm = confusion_matrix(y_test, y_pred)
    print(f'Confusion Matrix for {model_type}:\n', cm)
    print()

    print(f'Classification Report for {model_type}:\n', classification_report(y_test, y_pred))

    # print the first 10 predictions
    # print(f'Predictions for {model_type} (show first 10):\n', model.predict(X_test)[:10])
    # print()

    # cross validation
    cv_scores = cross_val_score(model, X_train, y_train, cv=5)
    print('Cross Validation scores:\n', cv_scores)
    print(f'Mean Score of {cv_scores.mean():.2f} with a standard deviation of {cv_scores.std():.2f}')

    return model, acc_test, acc_train
import numpy as np

model_types = ['logistic_regression', 'naive_bayes', 'kn_classifier', 'decision_tree', 'random_forest',
             'linear_discriminant', 'ada_boost', 'gradient_boost', 'xg_boost', 'lgb_classifier', 'svc']

results = {'Model': [],
           'Test Accuracy': [],
           'Train Accuracy': []}

for model_type in model_types:
    print(f'Model - {model_type}: ')
    print()

    model, acc_test, acc_train = get_model(X_train, y_train, X_test, y_test, model_type, vrtbose=0)
    results['Model'].append(model_type.capitalize())
    results['Test Accuracy'].append(acc_test)
    results['Train Accuracy'].append(acc_train)
    print('----------------------------------')
    print()




# Compare results
results_df = pd.DataFrame(results).sort_values(by='Test Accuracy', ascending=False)
print(results_df)
